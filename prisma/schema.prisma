// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PaymentStatus {
  pending
  approved
  authorized
  in_process
  in_mediation
  rejected
  cancelled
  refunded
  charged_back
}

enum Status {
  active
  draft
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  deleted_at    DateTime?

  accounts    Account[]
  sessions    Session[]
  classifieds Classified[]



  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Classified {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  price          Int           @default(0)
  categoryId     String        @map("category_id") @db.ObjectId
  description    String
  // images
  userId         String        @map("user_id") @db.ObjectId
  payment_status PaymentStatus @default(pending)
  status         Status        @default(draft)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  deleted_at     DateTime?

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("classifieds")
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  classifieds Classified[]
  @@map("categories")
}
